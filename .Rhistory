output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, NA, NA, NA, NA, NA, NA, NA)
} else {
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
}
out_mat[t,] <- as.vector(unlist(output))
print("Reached the end")
}
}
# update t
t <- t + 1
}
colnames(out_mat) <- c(colnames(out$results$results_df), "planned_analyses", "outcome", "side",
"futility", "es_alpha", "NN", "median_unbiased", "sw_lower",
"sw_upper", "sw_pvalue", "stop_time", "stop_direction", "stop_sign")
table(is.na(out_mat[,32]))
# simulate data step ------------------------------------------------------
n_sim <- 100
out_mat <- matrix(NA, ncol = 34, nrow = n_sim)
t <- 1
while(t <= n_sim){
if(t == 1){
start <- Sys.time()
}
if(t == n_sim){
print(Sys.time()-start)
}
set.seed(t)
RR_data <- simRR(p0 = pC, RR = mc, tau2 = tau2_analysis, N = trials, n_i = round(NN/2/trials))
for(i in 1:dim(RR_data)[1]){
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
if(!is.null(out$results$seq_inf$median_unbiased) & i != dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
out_mat[t,] <- as.vector(unlist(output))
print("Stopped early")
break
}
if(i == dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
if(is.null(out$results$seq_inf$median_unbiased)){
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, NA, NA, NA, NA, NA, NA, NA)
} else {
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
}
out_mat[t,] <- as.vector(unlist(output))
print("Reached the end")
}
}
# update t
t <- t + 1
}
i
i <- 2
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
i <- 2
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
traceback()
library(RTSA)
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
uniroot(sw_ciupper,
upper = 15,
lower = 0,
conf_level = conf_level, info = info_ana,
za = za, zb = zb, zc = zc, zd = zd)$root
uniroot(sw_ciupper,
upper = 20,
lower = 0,
conf_level = conf_level, info = info_ana,
za = za, zb = zb, zc = zc, zd = zd)$root
library(RTSA)
# simulate data step ------------------------------------------------------
n_sim <- 100
out_mat <- matrix(NA, ncol = 34, nrow = n_sim)
t <- 1
while(t <= n_sim){
if(t == 1){
start <- Sys.time()
}
if(t == n_sim){
print(Sys.time()-start)
}
set.seed(t)
RR_data <- simRR(p0 = pC, RR = mc, tau2 = tau2_analysis, N = trials, n_i = round(NN/2/trials))
for(i in 1:dim(RR_data)[1]){
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
if(!is.null(out$results$seq_inf$median_unbiased) & i != dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
out_mat[t,] <- as.vector(unlist(output))
print("Stopped early")
break
}
if(i == dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
if(is.null(out$results$seq_inf$median_unbiased)){
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, NA, NA, NA, NA, NA, NA, NA)
} else {
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
}
out_mat[t,] <- as.vector(unlist(output))
print("Reached the end")
}
}
# update t
t <- t + 1
}
library(RTSA)
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
# simulate data step ------------------------------------------------------
n_sim <- 100
out_mat <- matrix(NA, ncol = 34, nrow = n_sim)
t <- 1
while(t <= n_sim){
if(t == 1){
start <- Sys.time()
}
if(t == n_sim){
print(Sys.time()-start)
}
set.seed(t)
RR_data <- simRR(p0 = pC, RR = mc, tau2 = tau2_analysis, N = trials, n_i = round(NN/2/trials))
for(i in 1:dim(RR_data)[1]){
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
if(!is.null(out$results$seq_inf$median_unbiased) & i != dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
out_mat[t,] <- as.vector(unlist(output))
print("Stopped early")
break
}
if(i == dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
if(is.null(out$results$seq_inf$median_unbiased)){
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, NA, NA, NA, NA, NA, NA, NA)
} else {
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
}
out_mat[t,] <- as.vector(unlist(output))
print("Reached the end")
}
}
# update t
t <- t + 1
}
# needed libraries
library(RTSA)
# source functions
source("~/Documents/PhD/simul_TSA/code/functions.R")
n_sim <- 100
# design
retro = FALSE
futility = "none"
es_alpha = "esOF"
side = "2"
fixed_design = F
fixed_analysis = F
tau2_design = 0.05
tau2_analysis = 0.05
binary = T
trials = 5
# binary
outcome = "RR"
mc = 0.8
pC = 0.1
# calculate required information size -------------------------------------
if(binary & tau2_design == 0){
NN <- ris(outcome = outcome, mc = mc, pC = pC)$NF
} else if(binary & tau2_design != 0) {
outNN <- ris(outcome = outcome, mc = mc, pC = pC, tau2 = tau2_design,
fixed = FALSE)
NN <- outNN$NR_tau$nPax[,4][3]
}
if(!retro & binary & fixed_design){
design_rtsa <- RTSA(type = "design", outcome = outcome, side = 2, alpha = 0.05,
beta = 0.1, es_alpha = es_alpha, pC = pC,
timing = seq(1/trials,1,length.out = trials), mc = mc,
fixed = T)
NN <- round(design_rtsa$results$DARIS)
} else if(!retro & binary & !fixed_design){
trials <- outNN$NR_tau$nPax[,4][1] # number of trials from sample size calc.
design_rtsa <- RTSA(type = "design", outcome = outcome, side = 2, alpha = 0.05,
beta = 0.1, es_alpha = es_alpha, pC = pC,
timing = seq(1/trials,1,length.out = trials), mc = mc,
fixed = F, tau2 = tau2_design, trials = trials)
NN <- round(design_rtsa$results$DARIS)
}
# simulate data step ------------------------------------------------------
out_mat <- matrix(NA, ncol = 34, nrow = n_sim)
# simulate data step ------------------------------------------------------
out_mat <- matrix(NA, ncol = 34, nrow = n_sim)
t <- 1
while(t <= n_sim){
if(t == 1){
start <- Sys.time()
}
if(t == n_sim){
print(Sys.time()-start)
}
set.seed(t+100)
RR_data <- simRR(p0 = pC, RR = mc, tau2 = tau2_analysis, N = trials, n_i = round(NN/2/trials))
for(i in 1:dim(RR_data)[1]){
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
if(!is.null(out$results$seq_inf$median_unbiased) & i != dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
out_mat[t,] <- as.vector(unlist(output))
print("Stopped early")
break
}
if(i == dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
if(is.null(out$results$seq_inf$median_unbiased)){
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, NA, NA, NA, NA, NA, NA, NA)
} else {
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
}
out_mat[t,] <- as.vector(unlist(output))
print("Reached the end")
}
}
# update t
t <- t + 1
}
# needed libraries
library(RTSA)
# source functions
source("~/Documents/PhD/simul_TSA/code/functions.R") # set new path for running on server
number_of_tasks <- 10
task_id <- 1
# design
retro = FALSE
futility = "none"
fixed_design = F
fixed_analysis = F
tau2_design = 0.05
tau2_analysis = 0.05
binary = T
trials = 5
# binary
outcome = "RR"
mc = 0.8
pC = 0.1
# calculate required information size -------------------------------------
if(binary & tau2_design == 0){
NN <- ris(outcome = outcome, mc = mc, pC = pC)$NF
} else if(binary & tau2_design != 0) {
outNN <- ris(outcome = outcome, mc = mc, pC = pC, tau2 = tau2_design,
fixed = FALSE)
NN <- outNN$NR_tau$nPax[,4][3]
}
if(!retro & binary & fixed_design){
design_rtsa <- RTSA(type = "design", outcome = outcome, side = 2, alpha = 0.05,
beta = 0.1, es_alpha = es_alpha, pC = pC,
timing = seq(1/trials,1,length.out = trials), mc = mc,
fixed = T)
NN <- round(design_rtsa$results$DARIS)
} else if(!retro & binary & !fixed_design){
trials <- outNN$NR_tau$nPax[,4][1] # number of trials from sample size calc.
design_rtsa <- RTSA(type = "design", outcome = outcome, side = 2, alpha = 0.05,
beta = 0.1, es_alpha = es_alpha, pC = pC,
timing = seq(1/trials,1,length.out = trials), mc = mc,
fixed = F, tau2 = tau2_design, trials = trials)
NN <- round(design_rtsa$results$DARIS)
}
set.seed(270891) # set
seeds <- sample(1:10^6, size = number_of_tasks, replace = F)
set.seed(seeds[task_id])
RR_data <- simRR(p0 = pC, RR = mc, tau2 = tau2_analysis, N = trials, n_i = round(NN/2/trials))
for(i in 1:dim(RR_data)[1]){
out <- simTSA(data = RR_data[1:i,], fixed = fixed_analysis, pC = pC, design = design_rtsa,
futility = futility, outcome = outcome)
if(!is.null(out$results$seq_inf$median_unbiased) & i != dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
out_mat <- as.vector(unlist(output))
break
}
if(i == dim(RR_data)[1]){
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
if(is.null(out$results$seq_inf$median_unbiased)){
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, NA, NA, NA, NA, NA, NA, NA)
} else {
output <- out$results$results_df[max(which(!is.na(out$results$results_df$z_fixed))),]
output <- c(output, length(design_rtsa$settings$timing), design_rtsa$settings$outcome,
design_rtsa$settings$side, design_rtsa$settings$futility, design_rtsa$settings$es_alpha,
design_rtsa$settings$es_beta, NN, out$results$seq_inf$median_unbiased,
out$results$seq_inf$lower, out$results$seq_inf$upper, out$results$seq_inf$p.value,
out$results$seq_inf$stop_time, out$results$seq_inf$stop_direction,
out$results$seq_inf$stop_sign)
}
out_mat <- as.vector(unlist(output))
}
}
names(out_mat) <- c(colnames(out$results$results_df), "planned_analyses", "outcome", "side",
"futility", "es_alpha", "NN", "median_unbiased", "sw_lower",
"sw_upper", "sw_pvalue", "stop_time", "stop_direction", "stop_sign")
out_mat
paste0("~/Documents/PhD/simul_TSA/data/simul/","retro", retro,"fut",futility,
"fd", fixed_design, "fa", fixed_analysis, "td", tau2_design*100, "ta", tau2_analysis*100,
"trials",trials,"out",outcome,"mc",mc*100,"-",sprintf("%05d",task_id), ".RData")
save(out_mat,file = paste0("~/Documents/PhD/simul_TSA/data/simul/","retro", retro,"fut",futility,
"fd", fixed_design, "fa", fixed_analysis, "td", tau2_design*100, "ta", tau2_analysis*100,
"trials",trials,"out",outcome,"mc",mc*100,"-",sprintf("%05d",task_id), ".RData"))
load("/home/anne/Documents/PhD/simul_TSA/data/simul/retroFALSEfutnonefdFALSEfaFALSEtd5ta5trials14outRRmc80-00001.RData")
load("/home/anne/Documents/PhD/simul_TSA/data/simul/retroFALSEfutnonefdFALSEfaFALSEtd5ta5trials14outRRmc80-00001.RData")
list()
ls()
source("~/Documents/PhD/simul_TSA/code/functions.R") # set new path for running on server
ls()
500/3
166/60
10000/3
3333/60
list.files()
# script for extacting the output after running the script from the server
path <- "~/Documents/PhD/simul_TSA/data/simul/"
list.files(path)
list.files(path, pattern = "retro")
files <- list.files(path, pattern = "retro")
files
out <- do.call(rbind, lapply(files, load.Rdata2))
out <- do.call(rbind, lapply(files, load))
files
paste0(path,files)
out <- do.call(rbind, lapply(paste0(path,files), load))
View(out)
load(paste0(path,files[1]))
out_mat2 <- out_mat
rbind(out_mat2, out_mat)
out <- do.call(rbind, lapply(paste0(path,files), get(load)))
out <- do.call(rbind, lapply(paste0(path,files), function (x) get(load(x))))
View(out)
out <- data.frame(do.call(rbind, lapply(paste0(path,files), function (x) get(load(x)))))
View(out)
table(is.na(out$stop_time))
files
name <- sub("\\-.*", "", files)
name
name <- unqiue(sub("\\-.*", "", files))
name <- unique(sub("\\-.*", "", files))
# script for extacting the output after running the script from the server
path <- "~/Documents/PhD/simul_TSA/data/simul/"
files <- list.files(path, pattern = "retro")
length(files)
out <- data.frame(do.call(rbind, lapply(paste0(path,files), function (x) get(load(x)))))
View(out)
table(is.na(out$stop_time))
#table(is.na(out$stop_time))
name <- unique(sub("\\-.*", "", files))
save(out, paste0("~/Documents/PhD/simul_TSA/data/simul/sets/",name,".RData"))
save(out, file = paste0("~/Documents/PhD/simul_TSA/data/simul/sets/",name,".RData"))
save(out, file = paste0("~/Documents/PhD/simul_TSA/data/sets/",name,".RData"))
# script for extacting the output after running the script from the server
path <- "~/Documents/PhD/simul_TSA/data/simul/"
files <- list.files(path, pattern = "retro")
# script for extacting the output after running the script from the server
path <- "~/Documents/PhD/simul_TSA/data/simul/"
files <- list.files(path, pattern = "retro")
length(files)
# script for extacting the output after running the script from the server
path <- "~/Documents/PhD/simul_TSA/data/simul/"
files <- list.files(path, pattern = "retro")
out <- data.frame(do.call(rbind, lapply(paste0(path,files), function (x) get(load(x)))))
#table(is.na(out$stop_time))
name <- unique(sub("\\-.*", "", files))
name
save(out, file = paste0("~/Documents/PhD/simul_TSA/data/sets/",name,".RData"))
sub(".*\\-", "", files)
sub("\\.RData.*\\-", "", files)
sub(".*\\-", "", files)
f2 <- sub(".*\\-", "", files)
sub("\\.RData.*", "", files)
sub("\\.RData.*", "", f2)
as.numeric(sub("\\.RData.*", "", f2))
which(1:10000 !%in% as.numeric(sub("\\.RData.*", "", f2)))
which(!(1:10000 %in% as.numeric(sub("\\.RData.*", "", f2))))
# simulate data step ------------------------------------------------------
number_of_tasks <- 10000
seeds <- sample(1:10^6, size = number_of_tasks, replace = F)
task_id <- 5565
set.seed(seeds[task_id])
seeds[task_id]
# needed libraries
library(RTSA)
# source functions
source("~/Documents/PhD/simul_TSA/code/functions.R")
number_of_tasks <- 10000
task_id <- 5565
# design
retro = FALSE
futility = "none"
es_alpha = "esOF"
fixed_design = T
fixed_analysis = T
tau2_design = 0
tau2_analysis = 0
binary = T
trials = 5
# binary
outcome = "RR"
mc = 0.8
pC = 0.1
# calculate required information size -------------------------------------
if(binary & tau2_design == 0){
NN <- ris(outcome = outcome, mc = mc, pC = pC)$NF
} else if(binary & tau2_design != 0) {
outNN <- ris(outcome = outcome, mc = mc, pC = pC, tau2 = tau2_design,
fixed = FALSE)
NN <- outNN$NR_tau$nPax[,4][3]
}
if(!retro & binary & fixed_design){
design_rtsa <- RTSA(type = "design", outcome = outcome, side = 2, alpha = 0.05,
beta = 0.1, es_alpha = es_alpha, pC = pC,
timing = seq(1/trials,1,length.out = trials), mc = mc,
fixed = T)
NN <- round(design_rtsa$results$DARIS)
} else if(!retro & binary & !fixed_design){
trials <- outNN$NR_tau$nPax[,4][1] # number of trials from sample size calc.
design_rtsa <- RTSA(type = "design", outcome = outcome, side = 2, alpha = 0.05,
beta = 0.1, es_alpha = es_alpha, pC = pC,
timing = seq(1/trials,1,length.out = trials), mc = mc,
fixed = F, tau2 = tau2_design, trials = trials)
NN <- round(design_rtsa$results$DARIS)
}
# simulate data step ------------------------------------------------------
set.seed(270891) # set
seeds <- sample(1:10^6, size = number_of_tasks, replace = F)
set.seed(seeds[task_id])
RR_data <- simRR(p0 = pC, RR = mc, tau2 = tau2_analysis, N = trials, n_i = round(NN/2/trials))
seeds[task_id]
task_id
seeds[7352]
set.seed(seeds[7352])
# script for extacting the output after running the script from the server
path <- "~/Documents/PhD/simul_TSA/data/simul/"
files <- list.files(path, pattern = "retro")
f2 <- sub(".*\\-", "", files)
which(!(1:10000 %in% as.numeric(sub("\\.RData.*", "", f2))))
