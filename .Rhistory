library(lme4)
library(gsDesign)
library(PwrGSD)
x <- gsDesign(sfu = sfLDOF, sfl = sfLDOF)
str(x)
y <- synthPrepare(outcome = "OR", eI = perioOxy$cI,
nI = perioOxy$nI, eC = perioOxy$cC, nC = perioOxy$nC, method = "MH")
source("~/Documents/PhD/packages/synthesize/R/synthPrepare.R")
source("~/Documents/PhD/packages/synthesize/R/synthesize.R")
source("~/Documents/PhD/TSA/code/datasets.R")
source("~/Documents/PhD/packages/synthesize/R/bound.R")
source("~/Documents/PhD/packages/synthesize/R/boundariesLDOF.R")
y <- synthPrepare(outcome = "OR", eI = perioOxy$cI,
nI = perioOxy$nI, eC = perioOxy$cC, nC = perioOxy$nC, method = "MH")
y2 <- synthesize(y, fixedStudy = FALSE, hakn = TRUE)
d <- perioOxy
library(meta)
m.bin <- metabin(event.e = d$cI,
n.e = d$nI,
event.c = d$cC,
n.c = d$nC,
data=d, sm = "OR", method = "MH", hakn = TRUE,
studlab=d$trial)
m.bin
y2
nr <- 5677 #7224
infofrac <- c(cumsum(perioOxy$nC + perioOxy$nI)[c(1,3,5,7)]/nr,1)
alpha <- 0.05
Z <- abs(qnorm(alpha/4)) # set to 4 instead of 2 (Lan-DeMets (1983))
alphaS <- 2-2*pnorm(Z/sqrt(infofrac))
piS <- diff(c(0,2-2*pnorm(Z/sqrt(infofrac))))
boundout <- boundNull(infofrac = infofrac, mu = 0, piS = piS, r = 16)
boundout
gsDesign(k = 5, test.type = 2, timing = c(0.06921373, 0.13164452, 0.41542082, 0.62901440, 1),
sfu = sfLDOF, beta = 0.2, sfl = sfLDOF)
infofrac
gsDesign(k = 5, test.type = 2, timing = c(0.08807469,0.16751806,0.52862427,0.80042276,1.00000000),
sfu = sfLDOF, beta = 0.2, sfl = sfLDOF)
boundout
source("~/Documents/PhD/pMLE/code/prepareCord.R")
source("~/Documents/PhD/pMLE/code/prepareCord.R")
cord
source("~/Documents/PhD/pMLE/code/prepareCord.R")
cord[-7]
source("~/Documents/PhD/pMLE/code/prepareCord.R")
cord[,-7]
cordTrunc <- cord[-c(8:13),]
cordTrunc = rbind.data.frame(cordTrunc, c("Oh", 2002, 2, 16, 3, 17, 19), c("Hosono", 2008, 2, 20, 3, 20, 20))
cols.num = c("eI", "nI", "eC", "nC")
cordTrunc[,cols.num] = sapply(cordTrunc[,cols.num], as.numeric)
y <- metaPrepare(outcome = "RR", eI = cordTrunc$eI,
nI = cordTrunc$nI, eC = cordTrunc$eC, nC = cordTrunc$nC, method = "MH")
library(RTSA)
library(gsDesign)
library(metafor)
cordTrunc <- cord[-c(8:13),]
cordTrunc = rbind.data.frame(cordTrunc, c("Oh", 2002, 2, 16, 3, 17, 19), c("Hosono", 2008, 2, 20, 3, 20, 20))
cols.num = c("eI", "nI", "eC", "nC")
cordTrunc[,cols.num] = sapply(cordTrunc[,cols.num], as.numeric)
y <- metaPrepare(outcome = "RR", eI = cordTrunc$eI,
nI = cordTrunc$nI, eC = cordTrunc$eC, nC = cordTrunc$nC, method = "MH")
synout <- synthesize(y, fixedStudy = FALSE)
cordTrunc2 <- cord[-c(8:13),]
y2 <- metaPrepare(outcome = "RR", eI = cordTrunc2$eI,
nI = cordTrunc2$nI, eC = cordTrunc2$eC, nC = cordTrunc2$nC, method = "MH")
synout2 <- synthesize(y2, fixedStudy = FALSE)
synoutab <- matrix(c(as.character(c(paste0(round(synout$peF[1],4), " (",round(synout$peF[2],4), "; ",
round(synout$peF[3],4), ")"),
round(synout$peF[5],4), round(synout$Q[c(3)],4), dim(cordTrunc)[1])),
as.character(c(paste0(round(synout2$peF[1],4), " (",round(synout2$peF[2],4), "; ",
round(synout2$peF[3],4), ")"),
round(synout2$peF[5],4), round(synout2$Q[c(3)],4), dim(cordTrunc2)[1]))), ncol = 2)
rownames(synoutab) <- c("Pooled effect w. 95% CI", "P-value", "P-value for heterogeneity Q", "Number of trials")
colnames(synoutab) <- c("Cochrance meta-analysis", "Studies in APTS meta-analysis")
knitr::kable(synoutab, caption = "Results") %>% kable_paper() #%>% #add_header_above(c("", "RTSA::metaPrepare" = 2, "metafor::escalc and summary" = 2))
library(dplyr)
library(kableExtra)
cordTrunc <- cord[-c(8:13),]
cordTrunc = rbind.data.frame(cordTrunc, c("Oh", 2002, 2, 16, 3, 17, 19), c("Hosono", 2008, 2, 20, 3, 20, 20))
cols.num = c("eI", "nI", "eC", "nC")
cordTrunc[,cols.num] = sapply(cordTrunc[,cols.num], as.numeric)
y <- metaPrepare(outcome = "RR", eI = cordTrunc$eI,
nI = cordTrunc$nI, eC = cordTrunc$eC, nC = cordTrunc$nC, method = "MH")
synout <- synthesize(y, fixedStudy = FALSE)
cordTrunc2 <- cord[-c(8:13),]
y2 <- metaPrepare(outcome = "RR", eI = cordTrunc2$eI,
nI = cordTrunc2$nI, eC = cordTrunc2$eC, nC = cordTrunc2$nC, method = "MH")
synout2 <- synthesize(y2, fixedStudy = FALSE)
synoutab <- matrix(c(as.character(c(paste0(round(synout$peF[1],4), " (",round(synout$peF[2],4), "; ",
round(synout$peF[3],4), ")"),
round(synout$peF[5],4), round(synout$Q[c(3)],4), dim(cordTrunc)[1])),
as.character(c(paste0(round(synout2$peF[1],4), " (",round(synout2$peF[2],4), "; ",
round(synout2$peF[3],4), ")"),
round(synout2$peF[5],4), round(synout2$Q[c(3)],4), dim(cordTrunc2)[1]))), ncol = 2)
rownames(synoutab) <- c("Pooled effect w. 95% CI", "P-value", "P-value for heterogeneity Q", "Number of trials")
colnames(synoutab) <- c("Cochrance meta-analysis", "Studies in APTS meta-analysis")
knitr::kable(synoutab, caption = "Results") %>% kable_paper() #%>% #add_header_above(c("", "RTSA::metaPrepare" = 2, "metafor::escalc and summary" = 2))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RTSA)
library(gsDesign)
library(metafor)
library(dplyr)
library(kableExtra)
data("perioOxy")
head(perioOxy)
mp = metaPrepare(outcome = "RR", eI = perioOxy$eI, nI = perioOxy$nI,
eC = perioOxy$eC, nC = perioOxy$nC, method = "IV")
me = escalc(measure="RR", n1i=nI, n2i=nC, ai=eI, ci=eC, data=perioOxy)
sum.me = summary(me)
out.mat = cbind(perioOxy$trial, round(mp$te, 2), paste0("(", round(mp$lower,2), "; ", round(mp$upper,2),")"), round(exp(me$yi),2), paste0("(", round(exp(sum.me$ci.lb),2), "; ", round(exp(sum.me$ci.ub),2),")"))
colnames(out.mat) = c("Trial", "Effect estimate ", "95% CI", "Effect estimate ", "95% CI")
knitr::kable(out.mat, caption = "Results from the metaPrepare and escalc function") %>% kable_paper() %>% add_header_above(c("", "RTSA::metaPrepare" = 2, "metafor::escalc and summary" = 2))
sm = synthesize(mp) # RTSA function
out.mtFE = rma(yi, vi, data = me, method = "FE") # metafor function
out.mtRE = rma(yi, vi, data = me, method = "DL") # metafor function
out.mat = rbind(c(round(sm$peF[c(1,2,3)],2),round(sm$peF[5],4),
c(round(exp(c(out.mtFE$beta, out.mtFE$ci.lb, out.mtFE$ci.ub)),2),
round(out.mtFE$pval,4))),
c(round(sm$peR[c(1,2,3)],2),round(sm$peR[5],4),
round(exp(c(out.mtRE$beta, out.mtRE$ci.lb, out.mtRE$ci.ub)),2),
round(out.mtRE$pval,4)))
out.mat[,c(2,6)] = c(paste0("(", out.mat[,2], "; ", out.mat[,3],")"),
paste0("(", out.mat[,6], "; ", out.mat[,7],")"))
out.mat = out.mat[,-c(3,7)]
colnames(out.mat) = c("Effect estimate ", "95% CI", "p-value", "Effect estimate ",
"95% CI", "p-value")
rownames(out.mat) = c("Fixed-effect", "Random-effects")
knitr::kable(out.mat, caption = "Results from the synthesize and rma function") %>% kable_paper() %>% add_header_above(c("", "RTSA::synthesize" = 3, "metafor::rma" = 3))
# Calculate the cumulative number of participants
count <- cumsum(perioOxy$nI+perioOxy$nC)
# Calculate the RIS
RR = 0.9
p0 = sum(perioOxy$eC+perioOxy$eI)/sum(perioOxy$nC+perioOxy$nI)
pI = exp(log(p0)+log(RR))
pC = exp(log(p0)-log(RR))
RIS = nRandom(alpha = 0.05, beta = 0.2, pI = pI, pC = pC, diversity = 0.2)
# Set the timings of the studies relative to the RIS
timing <- c(count/RIS,1)
# create increment in the information
timingincr <- timing - c(0,timing[-length(timing)])
trials <- cbind(timing, timingincr, c(count,RIS))
# Start BoundaryCalculations programme ------------------------------------
# do not analyse after too small an increment in information
IFincrementThreshold <- 0.01
IFtotalThreshold <- 0.05
trials <- trials[trials[,2] > IFincrementThreshold,]
# calculate the boundaries
boundaries <- boundary(informationFractions = trials[,1],
side = 2, alpha = 0.05, zninf = -8, tol = 1e-24)
boundaries
gs = gsDesign(k = 7,
n.I = trials[,3],
test.type = 2,
alpha = 0.025, sfu = sfLDOF, sfl = sfLDOF)
gs$upper$bound
gs$lower$bound
RTSA(timing = timing, synth = mp, anaTimes = c(4,5,7,8),
side = 2, alpha = 0.05)
RTSAout = RTSA(timing = timing, synth = mp, anaTimes = c(4,5,7,8),
side = 2, alpha = 0.05)
plot(x = c(0,RTSAout$boundout$informationFractions), y =
c(8, RTSAout$boundout$alpha.boundaries.upper), xlim = c(0,1),
ylim = c(-8,8), type = "l", col = "red",
xlab = "Information fraction",
ylab = "Z-value")
RTSAout = RTSA(timing = timing, synth = mp, anaTimes = c(4,5,7,8),
side = 2, alpha = 0.05)
plot(x = c(0,RTSAout$boundout$informationFractions), y =
c(8, RTSAout$boundout$alpha.boundaries.upper), xlim = c(0,1),
ylim = c(-8,8), type = "l", col = "red",
xlab = "Information fraction",
ylab = "Z-value")
points(x = c(0,RTSAout$boundout$informationFractions), y =
c(8, RTSAout$boundout$alpha.boundaries.upper), pch = 20)
lines(x = c(0,RTSAout$boundout$informationFractions), y =
c(-8, RTSAout$boundout$alpha.boundaries.lower), col = "red")
points(x = c(0,RTSAout$boundout$informationFractions), y =
c(-8, RTSAout$boundout$alpha.boundaries.lower), pch = 20)
abline(h = 0)
abline(h = 1.96, col = "red")
abline(h = -1.96, col = "red")
lines(x = c(0,RTSAout$boundout$informationFractions[-4]), y =
c(0, RTSAout$zvalues[2,]), col = "blue")
RTSAout$boundout$informationFractions
RTSAout$zvalues[2,]
RTSAout$zvalues
RTSAout
library(RTSA)
cordTrunc <- cord[-c(8:13),]
cordTrunc = rbind.data.frame(cordTrunc, c("Oh", 2002, 2, 16, 3, 17, 19), c("Hosono", 2008, 2, 20, 3, 20, 20))
cols.num = c("eI", "nI", "eC", "nC")
cordTrunc[,cols.num] = sapply(cordTrunc[,cols.num], as.numeric)
pI2 = sum(cordTrunc$eI)/sum(cordTrunc$nI)
pC2 = sum(cordTrunc$eC)/sum(cordTrunc$nC)
N2 = sum(cordTrunc$nI)+sum(cordTrunc$nC)
theta2 = pC2-pI2; nu2 = (pC2+pI2)/2
nTheta2 = ceiling(4*(qnorm(1-0.05/2) + qnorm(0.8))^2*(nu2/theta2^2))
procRIS2 = N2/nTheta2
procRIS2
N2
nTheta2
gs = gsDesign(k = 2,
timing = c(458/2433, 2433/2433),
test.type = 2,
alpha = 0.025, sfu = sfLDOF, sfl = sfLDOF)
gs
timing <- c(458, 1566+458, 2433)/2433
gs = gsDesign(k = 2,
timing = timing,
test.type = 2,
alpha = 0.025, sfu = sfLDOF, sfl = sfLDOF)
timing <- c(458, 1566+458, 2433)/2433
gs = gsDesign(k = 3,
timing = timing,
test.type = 2,
alpha = 0.025, sfu = sfLDOF, sfl = sfLDOF)
gs
coronary <- data.frame(trial = c("ProveIt", "AtoZ", "TNT", "IDEAL"),
cI = c(147, 205, 334, 411),
nI = c(2099, 2265, 4995, 4439),
cC = c(172, 235, 418, 463),
nC = c(2063, 2232, 5006, 4449))
patchcea <- data.frame(trial = c("Ranaboldo", "Katz", "Myers", "Aburahma",
"Manheim", "Al-Rawi"),
eC = c(5, 7, 18, 2, 0, 0),
nC = c(109, 49, 61, 264, 196, 153),
eI = c(11, 10, 27, 2, 1, 4),
nI = c(104, 51, 64, 135, 208, 175))
save("data/patchcea.RData")
save(patchcea,"data/patchcea.RData")
save(patchcea, file = "data/patchcea.RData")
save(coronary, file = "data/coronary.RData")
coronary
patchcea
coronary <- data.frame(trial = c("ProveIt", "AtoZ", "TNT", "IDEAL"),
eI = c(147, 205, 334, 411),
nI = c(2099, 2265, 4995, 4439),
eC = c(172, 235, 418, 463),
nC = c(2063, 2232, 5006, 4449))
save(coronary, file = "data/coronary.RData")
library(devtools)
document()
library(devtools)
library(RTSA)
document()
rm(list = c("synthesize"))
document()
library(RTSA)
document()
library(RTSA)
document()
library(RTSA)
library(RTSA)
data("coronary")
mp = metaPrepare(outcome = "OR", eI = coronary$eI, nI = coronary$nI,
eC = coronary$eC, nC = coronary$nC, method = "IV")
mp
data("coronary")
mp = metaPrepare(outcome = "OR", eI = coronary$eI, nI = coronary$nI,
eC = coronary$eC, nC = coronary$nC, method = "MH")
count <- cumsum(coronary$nI+coronary$nC)
count
mp
synout = synthesize(mp, hakn = TRUE)
synout
coronary
mp
mp = metaPrepare(outcome = "OR", eI = coronary$eI, nI = coronary$nI,
eC = coronary$eC, nC = coronary$nC, method = "MH")
synout = synthesize(mp, hakn = TRUE)
synout
1.850906e-03 < 0.0007037012
1/mp$sig
w = 1/(mp$sig^2)
w
1/sum(w)
data("coronary")
mp = metaPrepare(outcome = "OR", eI = coronary$eI, nI = coronary$nI,
eC = coronary$eC, nC = coronary$nC, method = "MH")
synout = synthesize(mp)
synout
wR = 1/(mp$sig^2+0)
library(RTSA)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(RTSA)
library(gsDesign)
library(metafor)
library(dplyr)
library(kableExtra)
data("perioOxy")
head(perioOxy)
mp = metaPrepare(outcome = "RR", eI = perioOxy$eI, nI = perioOxy$nI,
eC = perioOxy$eC, nC = perioOxy$nC, method = "IV")
me = escalc(measure="RR", n1i=nI, n2i=nC, ai=eI, ci=eC, data=perioOxy)
sum.me = summary(me)
out.mat = cbind(perioOxy$trial, round(mp$te, 2), paste0("(", round(mp$lower,2), "; ", round(mp$upper,2),")"), round(exp(me$yi),2), paste0("(", round(exp(sum.me$ci.lb),2), "; ", round(exp(sum.me$ci.ub),2),")"))
colnames(out.mat) = c("Trial", "Effect estimate ", "95% CI", "Effect estimate ", "95% CI")
knitr::kable(out.mat, caption = "Results from the metaPrepare and escalc function") %>% kable_paper() %>% add_header_above(c("", "RTSA::metaPrepare" = 2, "metafor::escalc and summary" = 2))
sm = synthesize(mp) # RTSA function
out.mtFE = rma(yi, vi, data = me, method = "FE") # metafor function
out.mtRE = rma(yi, vi, data = me, method = "DL") # metafor function
out.mat = rbind(c(round(sm$peF[c(1,2,3)],2),round(sm$peF[5],4),
c(round(exp(c(out.mtFE$beta, out.mtFE$ci.lb, out.mtFE$ci.ub)),2),
round(out.mtFE$pval,4))),
c(round(sm$peR[c(1,2,3)],2),round(sm$peR[5],4),
round(exp(c(out.mtRE$beta, out.mtRE$ci.lb, out.mtRE$ci.ub)),2),
round(out.mtRE$pval,4)))
out.mat[,c(2,6)] = c(paste0("(", out.mat[,2], "; ", out.mat[,3],")"),
paste0("(", out.mat[,6], "; ", out.mat[,7],")"))
out.mat = out.mat[,-c(3,7)]
colnames(out.mat) = c("Effect estimate ", "95% CI", "p-value", "Effect estimate ",
"95% CI", "p-value")
rownames(out.mat) = c("Fixed-effect", "Random-effects")
knitr::kable(out.mat, caption = "Results from the synthesize and rma function") %>% kable_paper() %>% add_header_above(c("", "RTSA::synthesize" = 3, "metafor::rma" = 3))
# Calculate the cumulative number of participants
count <- cumsum(perioOxy$nI+perioOxy$nC)
# Calculate the RIS
RR = 0.9
p0 = sum(perioOxy$eC+perioOxy$eI)/sum(perioOxy$nC+perioOxy$nI)
pI = exp(log(p0)+log(RR))
pC = exp(log(p0)-log(RR))
RIS = nRandom(alpha = 0.05, beta = 0.2, pI = pI, pC = pC, diversity = 0.2)
# Set the timings of the studies relative to the RIS
timing <- c(count/RIS,1)
# create increment in the information
timingincr <- timing - c(0,timing[-length(timing)])
trials <- cbind(timing, timingincr, c(count,RIS))
# Start BoundaryCalculations programme ------------------------------------
# do not analyse after too small an increment in information
IFincrementThreshold <- 0.01
IFtotalThreshold <- 0.05
trials <- trials[trials[,2] > IFincrementThreshold,]
# calculate the boundaries
boundaries <- boundary(informationFractions = trials[,1],
side = 2, alpha = 0.05, zninf = -8, tol = 1e-24)
boundaries
gs = gsDesign(k = 7,
n.I = trials[,3],
test.type = 2,
alpha = 0.025, sfu = sfLDOF, sfl = sfLDOF)
gs$upper$bound
gs$lower$bound
RTSA(timing = timing, synth = mp, anaTimes = c(4,5,7,8),
side = 2, alpha = 0.05)
data("coronary")
mp = metaPrepare(outcome = "OR", eI = coronary$eI, nI = coronary$nI,
eC = coronary$eC, nC = coronary$nC, method = "MH")
synout = synthesize(mp)
synout
data("coronary")
mp = metaPrepare(outcome = "OR", eI = coronary$eI, nI = coronary$nI,
eC = coronary$eC, nC = coronary$nC, method = "MH")
synout = synthesize(mp, hakn = TRUE)
synout
data("patchcea")
data("patchcea")
mp = metaPrepare(outcome = "OR", eI = patchcea$eI, nI = patchcea$nI,
eC = patchcea$eC, nC = patchcea$nC, method = "MH")
synout = synthesize(mp, hakn = TRUE)
synout
exp(1)
citation("glmmTMB")
citation("lme4")
source("~/Documents/PhD/pMLE/code/prepareCord.R")
cordTrunc <- cord[-c(8:12),]
cordTrunc = rbind.data.frame(cordTrunc, c("Oh", 2002, 2, 16, 3, 17, 19), c("Hosono", 2008, 2, 20, 3, 20, 20))
cols.num = c("eI", "nI", "eC", "nC")
cordTrunc[,cols.num] = sapply(cordTrunc[,cols.num], as.numeric)
cordTrunc
cordTrunc[,1]
cordTrunc[,c(1,2)]
cordTrunc[order(cordTrunc$year),-7]
save(cordTrunc, file = "~/Documents/PhD/pMLE/data/cordTrunc.RData")
# create data according to the summary data
load("~/Documents/PhD/pMLE/data/cordTrunc.RData")
c(cordTrunc$nI + cordTrunc$nC)
cordTrunc$nC
cordTrunc$nI
# we need a study column, treatment column and event column
study = rep(cordTrunc$name, times =c(cordTrunc$nI + cordTrunc$nC))
library(reshape2)
melt(cordTrunc, id.vars = c("study", "name"), measure.vars = c("nC","nI"))
melt(cordTrunc, id.vars = c("name"), measure.vars = c("nC","nI"))
melt(cordTrunc, id.vars = c("name"), measure.vars = c("nC","nI"), variable.name = "count")
melt(cordTrunc, id.vars = c("name"), measure.vars = c("nC","nI"), value.name = "count")
cordTrunc
year = rep(cordTrunc$year, times =c(cordTrunc$nI + cordTrunc$nC))
melt(cordTrunc, id.vars = c("name", "year"), measure.vars = c("nC","nI"), value.name = "count")
dim(cordTrunc)[1]
cordTrunc$order = 1:dim(cordTrunc)[1]
melt(cordTrunc, id.vars = c("name", "year"), measure.vars = c("nC","nI"), value.name = "count")
melt(cordTrunc, id.vars = c("name", "year", "order"), measure.vars = c("nC","nI"), value.name = "count")
cordTrunc2 = melt(cordTrunc, id.vars = c("name", "year", "order"),
measure.vars = c("nC","nI"), value.name = "count")
cordTrunc2[order(cordTrunc2$name, cordTrunc2$order),]
cordTrunc2[order(cordTrunc2$order),]
cordTrunc[order(cordTrunc$year),-7]
cordTrunc$order = 1:dim(cordTrunc)[1]
save(cordTrunc, file = "~/Documents/PhD/pMLE/data/cordTrunc.RData")
# create data according to the summary data
load("~/Documents/PhD/pMLE/data/cordTrunc.RData")
cordTrunc
cordTrunc[order(cordTrunc$year),-7]
cordTrunc
cordTrunc[order(cordTrunc$year),-7]
cordTrunc
cordTrunc <- cord[-c(8:12),]
source("~/Documents/PhD/pMLE/code/prepareCord.R")
cordTrunc <- cord[-c(8:12),]
cordTrunc = rbind.data.frame(cordTrunc, c("Oh", 2002, 2, 16, 3, 17, 19), c("Hosono", 2008, 2, 20, 3, 20, 20))
cols.num = c("eI", "nI", "eC", "nC")
cordTrunc[,cols.num] = sapply(cordTrunc[,cols.num], as.numeric)
cordTrunc[order(cordTrunc$year),-7]
cordTrunc$order = 1:dim(cordTrunc)[1]
cordTrunc
cordTrunc = cordTrunc[order(cordTrunc$year),-7]
source("~/Documents/PhD/pMLE/code/prepareCord.R")
cordTrunc <- cord[-c(8:12),]
cordTrunc = rbind.data.frame(cordTrunc, c("Oh", 2002, 2, 16, 3, 17, 19), c("Hosono", 2008, 2, 20, 3, 20, 20))
cols.num = c("eI", "nI", "eC", "nC")
cordTrunc[,cols.num] = sapply(cordTrunc[,cols.num], as.numeric)
cordTrunc = cordTrunc[order(cordTrunc$year),-7]
cordTrunc$order = 1:dim(cordTrunc)[1]
save(cordTrunc, file = "~/Documents/PhD/pMLE/data/cordTrunc.RData")
# create data according to the summary data
load("~/Documents/PhD/pMLE/data/cordTrunc.RData")
cordTrunc
# we need a study column, year column, treatment column and event column
study = rep(cordTrunc$name, times =c(cordTrunc$nI + cordTrunc$nC))
year = rep(cordTrunc$year, times =c(cordTrunc$nI + cordTrunc$nC))
library(reshape2)
cordTrunc2 = melt(cordTrunc, id.vars = c("name", "year", "order"),
measure.vars = c("nC","nI"), value.name = "count")
cordTrunc2[order(cordTrunc2$order),]
treatment = rep(c(0,1), times = c(cordTrunc$count))
c(cordTrunc$count)
treatment = rep(c(0,1), times = c(cordTrunc2$count))
cordTrunc2$count
treatment = rep(c(0,1), times = 10)
treatment
class(cordTrunc2$count)
treatment = rep(c(0,1), times = c(10,10))
treatment
rep(c(0,1), times = c(10,10, 10))
times = c(10,10, 10, 10))
rep(c(0,1), times = c(10,10, 10, 10))
rep(c(0,1), each = 10)
rep(c(0,1), each = times)
rep(c(0,1), times = 10)
treatment = rep(rep(c(0,1), times = 10), times = cordTrunc2$count)
cordTrunc3 = melt(cordTrunc, id.vars = c("name", "year", "order"),
measure.vars = c("eC","eI"), value.name = "count")
cordTrunc3[order(cordTrunc2$order),]
cordTrunc3 = melt(cordTrunc, id.vars = c("name", "year", "order"),
measure.vars = c("eC","eI"), value.name = "count")
cordTrunc3 = cordTrunc3[order(cordTrunc2$order),]
cordTrunc3
merge(cordTrunc2, cordTrunc3)
cordTrunc2 = melt(cordTrunc, id.vars = c("name", "year", "order"),
measure.vars = c("nC","nI"), value.name = "count",
variable.name = "obs")
cordTrunc2 = cordTrunc2[order(cordTrunc2$order),]
cordTrunc3 = melt(cordTrunc, id.vars = c("name", "year", "order"),
measure.vars = c("eC","eI"), value.name = "events",
variable.name = "treat")
cordTrunc3 = cordTrunc3[order(cordTrunc2$order),]
merge(cordTrunc2, cordTrunc3)
cordTrunc2
cordTrunc3
cordTrunc3 = cordTrunc3[order(cordTrunc3$order),]
cordTrunc3
merge(cordTrunc2, cordTrunc3)
cordTrunc2
cbind(cordTrunc2, cordTrunc3$treat, cordTrunc3$events)
cordTrunc2 = cbind(cordTrunc2, cordTrunc3$treat, cordTrunc3$events)
names(cordTrunc2)
names(cordTrunc2)[c(6,7)] = c("treat", "events")
cordTrunc2$noEvents = cordTrunc2$count - cordTrunc2$events
cordTrunc2
cordTrunc4 = melt(cordTrunc2, id.vars = c("name", "year", "order"),
measure.vars = c("events","noEvents"), value.name = "eventCount")
cordTrunc4
cordTrunc4 = cordTrunc4[order(cordTrunc3$order),]
cordTrunc4
cordTrunc4 = melt(cordTrunc2, id.vars = c("name", "year", "order"),
measure.vars = c("events","noEvents"), value.name = "eventCount")
cordTrunc4 = cordTrunc4[order(cordTrunc4$order),]
cordTrunc4
cordTrunc4$order+c(0, 0.5)
cordTrunc4 = cordTrunc4[order(cordTrunc4$order),]
cordTrunc4
cordTrunc4$order = cordTrunc4$order+c(0, 0.5)
cordTrunc4 = cordTrunc4[order(cordTrunc4$order),]
cordTrunc4
# make the events column
event = rep(rep(c(1,0), 20), each = cordTrunc4$eventCount)
rep(c(1,0), 20)
cordTrunc4$eventCount
# make the events column
event = rep(rep(c(1,0), 20), times = cordTrunc4$eventCount)
event[1:100]
persondata = cbind(study, year, treatment, event)
View(persondata)
pdCord = cbind(study, year, treatment, event)
save(pdCord, file = "~/Documents/PhD/pMLE/data/pdCord.RData")
binom.test(0, 14)
