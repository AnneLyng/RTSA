geom_point(aes(x = sma_timing, y = lower, col = "aline"), cex = 1,
na.rm=TRUE)
}
tmp_z
p <- p + geom_line(aes(x = sma_timing,y = sign*tmp_z, col = "zline", linetype = "ztype"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing,y = sign*tmp_z, col="zline"), cex = 1.25, na.rm=TRUE)
p
p <- p + geom_line(data = df[!is.na(df$z_fixed),], aes(x = sma_timing,y = tmp_z[!is.na(df$z_fixed)], col = "zline", linetype = "ztype"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing,y = sign*tmp_z, col="zline"), cex = 1.25, na.rm=TRUE)
p
library(RTSA)
library(RTSA)
plot(ex_retro_rtsa)
eds <- eds[order(eds$year),]
ex_retro_rtsa <- RTSA(type = "analysis", data = eds, side = 2, outcome = "MD",
alpha = 0.05, beta = 0.1, futility = "none",
fixed = FALSE, es_alpha = "esOF", mc = -2,
ana_time = c(3,6))
plot(ex_retro_rtsa)
p
# labels and breaks
breakz <- c(df$sma_timing)[c(TRUE,diff(c(df$sma_timing[-length(df$sma_timing)]))>max(df$sma_timing,na.rm = T)/20,TRUE)]
breakz <- breakz[-length(breakz)]
breakz
df$sma_timing
#AIS + DARIS LINE
if(x$results$AIS>x$results$DARIS) {expan_x <- 0.05} else {expan_x <- 0}
orgTiming
x$orgTiming
p <- p + geom_segment(x=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
xend=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
y=-Inf,yend=na.omit(sign*tmp_z)[length(na.omit(tmp_z))],
linetype="dotted", linewidth = 0.5, col = "gray", na.rm=TRUE) +
geom_vline(xintercept = ceiling(x$results$DARIS), linewidth = 0.25, col = "black") +
scale_x_continuous(expand = expansion(0,expan_x),
breaks=breakz, name = xlabz,
labels = c(paste(round(breakz[-(length(breakz))],2), ceiling(x$results$DARIS*breakz[-(length(breakz))]), sep = "\n"),paste0(round(breakz[length(breakz)],2),"\n",x$results$AIS, "\nAIS")),
sec.axis = sec_axis(~.,
breaks=ceiling(x$results$DARIS),
labels = paste0("DARIS:\n",ceiling(x$results$DARIS))))
p
max(c(df$sma_timing)[!is.na(df$z_fixed)])
max(c(df$sma_timing)[!is.na(df$z_fixed)])
na.omit(sign*tmp_z)[length(na.omit(tmp_z))]
ceiling(x$results$DARIS)
max(df$sma_timing[!is.na(df$upper)])
breakz
xlabz
breakz
paste(round(breakz,2), ceiling(x$results$DARIS*breakz), sep = "\n")
#CREATE PLOT
p <- ggplot(data = df)
#Zoom in
p <- p +
coord_cartesian(xlim = c(0,max(df$sma_timing+0.1,1.1, na.rm = T)),
ylim = c(ifelse(x$setting$side == 2, -8, -5),8))
#Convetional alpha boundaires
p <- p + geom_line(aes(x = sma_timing, y = rep(qnorm(1-tmp_ca), length(sma_timing)),
col = "naiveline", linetype = "naivetype"), linewidth = 0.25,
na.rm=TRUE)
if(x$settings$side == 2){
p <- p + geom_line(aes(x = sma_timing, y = rep(-qnorm(1-tmp_ca), length(sma_timing)),
col = "naiveline", linetype = "naivetype"), linewidth = 0.25,
na.rm=TRUE)
}
#Zero line
p <- p + geom_segment(x=0,xend=max(df$sma_timing,df$sma_timing*(x$results$AIS/x$results$DARIS), na.rm = T), y=0, yend = 0,
linewidth = 0.25, col = "gray", linetype="solid",
na.rm=TRUE)
if(is.null(x$settings$design) & x$settings$type != "design"){
lt_alpha <- "dashed"
colz <- c(colz, `lt_alpha` = lt_alpha)
} else {
lt_alpha <- "solid"
colz <- c(colz, `lt_alpha` = lt_alpha)
}
#Alpha boundaries
p <- p +
{if(theme == "modern")geom_ribbon(aes(x=sma_timing, ymin=Inf,
ymax= upper, fill = "aline"), alpha = 0.25,na.rm=TRUE)} +
geom_line(data = df[!is.na(df$upper),],aes(x = sma_timing, y =  upper, col = "aline", linetype = "lt_alpha"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing, y =  upper, col = "aline"), cex = 1, na.rm=TRUE)
if(x$settings$side == 2){
p <- p +
{if(theme == "modern")geom_ribbon(aes(x=sma_timing, ymin=-Inf,
ymax= lower, fill = "aline"), alpha=0.25,na.rm=TRUE)} +
geom_line(data = df[!is.na(df$upper),], aes(x = sma_timing, y =  lower, col = "aline", linetype = "lt_alpha"),  linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing, y = lower, col = "aline"), cex = 1,
na.rm=TRUE)
}
#Beta boundaries
if(x$settings$futility != "none"){
if(x$settings$futility == "non-binding" | (is.null(x$settings$design) & x$settings$type == "analysis")){
lt_beta <- "dashed"
colz <- c(colz, `lt_beta` = lt_beta)
} else {
lt_beta <- "solid"
colz <- c(colz, `lt_beta` = lt_beta)
}
if(x$settings$side == 1){
p <- p +
{if(theme == "modern") geom_ribbon(aes(x=sma_timing, ymax=20,
ymin= fut_lower, fill = "bline"), alpha=0.25,
na.rm=TRUE)} +
geom_line(aes(x = sma_timing, y = fut_lower, col = "bline", linetype = "lt_beta"),
cex = 0.25, na.rm=TRUE) +
geom_point(aes(x = sma_timing, y = fut_lower, col = "bline"), cex = 1, na.rm=TRUE)
}
if(x$settings$side == 2){
p <- p +
{if(theme == "modern") geom_ribbon(aes(x=sma_timing, ymin=fut_upper,
ymax=fut_lower, fill = "bline"), alpha=0.25, na.rm=TRUE)} +
geom_line(aes(x = sma_timing, y = fut_lower, col = "bline", linetype = "lt_beta"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing, y = fut_lower, col = "bline"), cex = 1,
na.rm=TRUE) +
geom_line(aes(x = sma_timing, y = fut_upper, col = "bline", linetype = "lt_beta"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing, y = fut_upper, col = "bline"), cex = 1,
na.rm=TRUE)
}
}
p <- p + geom_line(data = df[!is.na(df$z_fixed),], aes(x = sma_timing,y = tmp_z[!is.na(df$z_fixed)], col = "zline", linetype = "ztype"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing,y = sign*tmp_z, col="zline"), cex = 1.25, na.rm=TRUE)
p
# labels and breaks
breakz <- c(df$sma_timing)[c(TRUE,diff(c(df$sma_timing[-length(df$sma_timing)]))>max(df$sma_timing,na.rm = T)/20,TRUE)]
breakz <- breakz[-length(breakz)]
#AIS + DARIS LINE
if(x$results$AIS>x$results$DARIS) {expan_x <- 0.05} else {expan_x <- 0}
p <- p + geom_segment(x=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
xend=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
y=-Inf,yend=na.omit(sign*tmp_z)[length(na.omit(tmp_z))],
linetype="dotted", linewidth = 0.5, col = "gray", na.rm=TRUE) +
geom_vline(xintercept = max(df$sma_timing[!is.na(df$upper)]), linewidth = 0.25, col = "black") +
scale_x_continuous(expand = expansion(0,expan_x),
breaks=breakz, name = xlabz,
labels = c(paste(round(breakz,2), ceiling(x$results$DARIS*breakz), sep = "\n"),paste0(round(breakz[length(breakz)],2),"\n",x$results$AIS, "\nAIS")),
sec.axis = sec_axis(~.,
breaks=max(df$sma_timing[!is.na(df$upper)]),
labels = paste0("DARIS:\n",ceiling(x$results$DARIS))))
p
breakz
# labels and breaks
breakz <- c(df$sma_timing)[c(TRUE,diff(c(df$sma_timing[-length(df$sma_timing)]))>max(df$sma_timing,na.rm = T)/20,TRUE)]
p <- p + geom_segment(x=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
xend=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
y=-Inf,yend=na.omit(sign*tmp_z)[length(na.omit(tmp_z))],
linetype="dotted", linewidth = 0.5, col = "gray", na.rm=TRUE) +
geom_vline(xintercept = max(df$sma_timing[!is.na(df$upper)]), linewidth = 0.25, col = "black") +
scale_x_continuous(expand = expansion(0,expan_x),
breaks=breakz, name = xlabz,
labels = c(paste(round(breakz,2), ceiling(x$results$DARIS*breakz), sep = "\n"),paste0(round(breakz[length(breakz)],2),"\n",x$results$AIS, "\nAIS")),
sec.axis = sec_axis(~.,
breaks=max(df$sma_timing[!is.na(df$upper)]),
labels = paste0("DARIS:\n",ceiling(x$results$DARIS))))
breakz
xlabz
c(paste(round(breakz,2), ceiling(x$results$DARIS*breakz), sep = "\n"),paste0(round(breakz[length(breakz)],2),"\n",x$results$AIS, "\nAIS"))
ceiling(x$results$DARIS*breakz)
c(paste(round(breakz[-length(breakz)],2), ceiling(x$results$DARIS*breakz[-length(breakz)]), sep = "\n"),paste0(round(breakz[length(breakz)],2),"\n",x$results$AIS, "\nAIS"))
p <- p + geom_segment(x=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
xend=max(c(df$sma_timing)[!is.na(df$z_fixed)]),
y=-Inf,yend=na.omit(sign*tmp_z)[length(na.omit(tmp_z))],
linetype="dotted", linewidth = 0.5, col = "gray", na.rm=TRUE) +
geom_vline(xintercept = max(df$sma_timing[!is.na(df$upper)]), linewidth = 0.25, col = "black") +
scale_x_continuous(expand = expansion(0,expan_x),
breaks=breakz, name = xlabz,
labels = c(paste(round(breakz[-length(breakz)],2), ceiling(x$results$DARIS*breakz[-length(breakz)]), sep = "\n"),paste0(round(breakz[length(breakz)],2),"\n",x$results$AIS, "\nAIS")),
sec.axis = sec_axis(~.,
breaks=max(df$sma_timing[!is.na(df$upper)]),
labels = paste0("DARIS:\n",ceiling(x$results$DARIS))))
p
library(RTSA)
plot(ex_retro_rtsa)
plot(ex_retro_rtsa)
?geom_text
library(RTSA)
?RTSA
data(perioOxy)
RTSA(type = "analysis", data = perioOxy, outcome = "RR", mc = 0.8, side = 2,
alpha = 0.05, beta = 0.2, es_alpha = "esOF")
traceback()
library(RTSA)
data(perioOxy)
RTSA(type = "analysis", data = perioOxy, outcome = "RR", mc = 0.8, side = 2,
alpha = 0.05, beta = 0.2, es_alpha = "esOF")
View(results)
design$inf_frac
orgTiming
design$inf_frac
timing
?duplicated
sort(unique(c(orgTiming,timing)))
design$inf_frac <- sort(unique(c(orgTiming,timing)))
n_out <- which(design$inf_frac %in% orgTiming)
n_out
results <- as.data.frame(matrix(ncol = 21, nrow = n_row))
results[n_out,1:2] <- t(zvalues)
results[n_out,3:4] <- t(outcome_values)
results[ana_time,10:11] <- t(naiveCI$CIfixed)
results[ana_time,12:13] <- t(naiveCI$CIrandom)
results[ana_time,14:15] <- t(TSAadjCI$CIfixed)
results[ana_time,16:17] <- t(TSAadjCI$CIrandom)
ana_time
results[n_out,18:19] <- t(p_values)
results[n_out,20:21] <- t(sd_values)
results
ana_time
results[,5] <- design$inf_frac
results
results[which(timing == design$inf_frac),6] <- design$alpha_ubound
which(timing == design$inf_frac)
which(timing %in% design$inf_frac)
timing
design$inf_frac
which(design$inf_frac %in% timing)
indi_seq <- which(design$inf_frac %in% timing)
library(RTSA)
data(perioOxy)
RTSA(type = "analysis", data = perioOxy, outcome = "RR", mc = 0.8, side = 2,
alpha = 0.05, beta = 0.2, es_alpha = "esOF")
trials
trials <-
matrix(trials[trials[, 2] > time_tf, ], ncol = 3, byrow = F)
trials
perioOxy
ana_time
timing <- c(subjects / RIS)
if(max(timing) < design_R){
timing <- c(timing, design_R)
} else if(max(timing) > design_R){
timing <- c(timing[timing < design_R], design_R)
}
timing
max(timing) < design_R
timing <- c(timing, design_R)
trials <- cbind(timing, NA, 1:length(timing))
trials
trials <- trials[ana_time,]
trials
trials[, 2] <-
trials[, 1] - c(0, trials[, 1][-length(trials[, 1])])
trials
# if new study adds less than 1% of RIS, the analysis is not performed.
time_tf = 0.01
war_tim2 <- NULL
length(which(trials[, 2] > time_tf)) != length(trials[, 1])
trials <-
matrix(trials[trials[, 2] > time_tf, ], ncol = 3, byrow = F)
trials
ana_time = trials[, 3][which(trials[, 2] > time_tf)]
ana_time
library(RTSA)
data(perioOxy)
RTSA(type = "analysis", data = perioOxy, outcome = "RR", mc = 0.8, side = 2,
alpha = 0.05, beta = 0.2, es_alpha = "esOF")
library(RTSA)
data(perioOxy)
RTSA(type = "analysis", data = perioOxy, outcome = "RR", mc = 0.8, side = 2,
alpha = 0.05, beta = 0.2, es_alpha = "esOF")
RTSA(type = "analysis", data = perioOxy, outcome = "RR", mc = 0.8, side = 2,
alpha = 0.05, beta = 0.2, es_alpha = "esOF", futility = "binding",
es_beta = "esPoc")
RTSA(type = "analysis", data = perioOxy, outcome = "RR", mc = 0.8, side = 2,
alpha = 0.05, beta = 0.2, es_alpha = "esOF", futility = "non-binding",
es_beta = "esPoc")
RTSA(type = "design", outcome = "MD", mc = 5, sd_mc = 10, side = 1,
timing = c(0.33, 0.66, 1), fixed = TRUE,
alpha = 0.025, beta = 0.1, es_alpha = "esOF", futility = "non-binding",
es_beta = "esPoc")
RTSA(type = "design", outcome = "RR", mc = 0.75, side = 1,
timing = c(0.33, 0.66, 1), p0 = 0.1, D2 = 0.1,
alpha = 0.025, beta = 0.2, es_alpha = "esOF", futility = "non-binding",
es_beta = "esOF")
out_rtsa <-  RTSA(type = "design", outcome = "RR", mc = 0.75, side = 1,
timing = c(0.33, 0.66, 1), p0 = 0.1, D2 = 0.1,
alpha = 0.025, beta = 0.2, es_alpha = "esOF", futility = "non-binding",
es_beta = "esOF")
out_rtsa$ris
plot(out_rtsa)
fake_data <- data.frame(eI = c(10,10), eC = c(13, 11), nI = c(750, 750),
nC = c(750,750))
RTSA(type = "analysis", design = out_rtsa, data = fake_data)
an_rtsa <- RTSA(type = "analysis", design = out_rtsa, data = fake_data)
plot(an_rtsa)
library(RTSA)
plot(an_rtsa)
#CREATE PLOT
p <- ggplot(data = df)
p
#Zoom in
p <- p +
coord_cartesian(xlim = c(0,max(df$sma_timing+0.1,1.1, na.rm = T)),
ylim = c(ifelse(x$setting$side == 2, -8, -5),8))
#Convetional alpha boundaires
p <- p + geom_line(aes(x = sma_timing, y = rep(qnorm(1-tmp_ca), length(sma_timing)),
col = "naiveline", linetype = "naivetype"), linewidth = 0.25,
na.rm=TRUE)
if(x$settings$side == 2){
p <- p + geom_line(aes(x = sma_timing, y = rep(-qnorm(1-tmp_ca), length(sma_timing)),
col = "naiveline", linetype = "naivetype"), linewidth = 0.25,
na.rm=TRUE)
}
#Zero line
p <- p + geom_segment(x=0,xend=max(df$sma_timing,df$sma_timing*(x$results$AIS/x$results$DARIS), na.rm = T), y=0, yend = 0,
linewidth = 0.25, col = "gray", linetype="solid",
na.rm=TRUE)
if(is.null(x$settings$design) & x$settings$type != "design"){
lt_alpha <- "dashed"
colz <- c(colz, `lt_alpha` = lt_alpha)
} else {
lt_alpha <- "solid"
colz <- c(colz, `lt_alpha` = lt_alpha)
}
lt_alpha <- "dashed"
colz <- c(colz, `lt_alpha` = lt_alpha)
p +   geom_line(data = df[!is.na(df$upper),],aes(x = sma_timing, y =  upper, col = "aline", linetype = "lt_alpha"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing, y =  upper, col = "aline"), cex = 1, na.rm=TRUE)
p <- p +   geom_line(data = df[!is.na(df$upper),],aes(x = sma_timing, y =  upper, col = "aline", linetype = "lt_alpha"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing, y =  upper, col = "aline"), cex = 1, na.rm=TRUE)
p <- p +  geom_line(data = df[!is.na(df$upper),], aes(x = sma_timing, y =  lower, col = "aline", linetype = "lt_alpha"),  linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing, y = lower, col = "aline"), cex = 1,
na.rm=TRUE)
p <- p + geom_line(data = df[!is.na(df$z_fixed),], aes(x = sma_timing,y = tmp_z[!is.na(df$z_fixed)], col = "zline", linetype = "ztype"), linewidth = 0.25,
na.rm=TRUE) +
geom_point(aes(x = sma_timing,y = sign*tmp_z, col="zline"), cex = 1.25, na.rm=TRUE)
p
df[!is.na(df$z_fixed),]
tmp_z[!is.na(df$z_fixed)]
p <- p + geom_line(data = df[!is.na(df$z_fixed),], aes(x = sma_timing,y = sign*tmp_z[!is.na(df$z_fixed)],
col = "zline", linetype = "ztype"), linewidth = 0.25,
na.rm=TRUE)
p
df[!is.na(df$z_fixed),]
df$sma_timing[!is.na(df$z_fixed)]
sign*tmp_z[!is.na(df$z_fixed)]
library(RTSA)
plot(an_rtsa)
library(RTSA)
plot(an_rtsa)
df$sma_timing[!is.na(df$z_fixed)]
sign*tmp_z[!is.na(df$z_fixed)]
library(RTSA)
plot(an_rtsa)
df$sma_timing[!is.na(df$z_fixed)]
sign*tmp_z[!is.na(df$z_fixed)]
sign*tmp_z
library(RTSA)
plot(an_rtsa)
library(RTSA)
plot(an_rtsa)
library(RTSA)
plot(an_rtsa)
breakz
paste(round(breakz[-length(breakz)],2), ceiling(x$results$DARIS*breakz[-length(breakz)]), sep = "\n")
paste0(round(breakz[length(breakz)],2)
,"\n",x$results$AIS, "\nAIS")
breakz <- breakz[!is.na(df$z_fixed)]
breakz
# labels and breaks
breakz <- c(df$sma_timing)[c(TRUE,diff(c(df$sma_timing[-length(df$sma_timing)]))>max(df$sma_timing,na.rm = T)/20,TRUE)]
df
x$results$AIS<x$results$DARIS
breakz <- breakz[-length(breakz)]
breakz
breakz
plot(an_rtsa)
library(RTSA)
Q
library(RTSA)
plot(an_rtsa)
require(reshape2)
require(ggplot2)
# Create a list of tasks name strings.
tasks <- c("Write introduction", "Parse citation data",
"Construct data timeline",
"Write methods", "Model formulation",
"Model selection", "Write results", "Write discussion",
"Write abstract and editing",
"Write introduction", "Write introduction", "Write results")
# Compile dataframe of task names, and respective start and end dates.
dfr <- data.frame(
name = factor(tasks, levels = tasks[1:9]),
start.date = as.Date(c("2018-04-09", "2018-04-09", "2018-04-16",
"2018-04-30", "2018-04-16", "2018-05-21",
"2018-06-04", "2018-07-02", "2018-07-30",
"2018-05-15", "2018-06-03", "2018-07-25"
)),
end.date = as.Date(c("2018-04-30", "2018-04-20", "2018-05-18",
"2018-06-01", "2018-05-18", "2018-06-01",
"2018-06-29", "2018-07-27", "2018-08-31",
"2018-05-29", "2018-06-20", "2018-08-15")),
flag = c(0, 0, 1,
1, 1, 1,
0, 0, 1,
1, 0, 1)
)
# Merge start and end dates into durations.
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
require(reshape2)
install.packages("reshape2")
require(reshape2)
require(ggplot2)
tasks <- c("Write introduction", "Parse citation data",
"Construct data timeline",
"Write methods", "Model formulation",
"Model selection", "Write results", "Write discussion",
"Write abstract and editing",
"Write introduction", "Write introduction", "Write results")
# Compile dataframe of task names, and respective start and end dates.
dfr <- data.frame(
name = factor(tasks, levels = tasks[1:9]),
start.date = as.Date(c("2018-04-09", "2018-04-09", "2018-04-16",
"2018-04-30", "2018-04-16", "2018-05-21",
"2018-06-04", "2018-07-02", "2018-07-30",
"2018-05-15", "2018-06-03", "2018-07-25"
)),
end.date = as.Date(c("2018-04-30", "2018-04-20", "2018-05-18",
"2018-06-01", "2018-05-18", "2018-06-01",
"2018-06-29", "2018-07-27", "2018-08-31",
"2018-05-29", "2018-06-20", "2018-08-15")),
flag = c(0, 0, 1,
1, 1, 1,
0, 0, 1,
1, 0, 1)
)
# Merge start and end dates into durations.
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
# gannt chart
ggplot(mdfr) +
geom_line(aes(value, name, colour = as.factor(flag)), size = 4) +
labs(title = "Project gantt chart",
x = NULL,
y = NULL) +
theme_minimal()
# Compile dataframe of task names, and respective start and end dates.
dfr <- data.frame(
name = factor(tasks, levels = tasks[1:6]),
start.date = as.Date(c("2024-02-01", "2024-04-01", "2024-06-01",
"2025-01-01", "2025-03-01", "2025-01-01",
"2025-06-01", "2025-12-01")),
end.date = as.Date(c("2024-05-01", "2024-12-01", "2025-06-01",
"2025-08-01", "2026-01-31", "2025-02-01",
"2025-07-01", "2026-01-01")))
# Create a list of tasks name strings.
tasks <- c("1. Analyse NN trials", "2. Methods for multiple TTE enpoints",
"3. Software implementation",
"4. Review of inference methods", "5. Over-running methods",
"6. Oral presentations", "6. Oral presentations", "6. Oral presentations")
# Compile dataframe of task names, and respective start and end dates.
dfr <- data.frame(
name = factor(tasks, levels = tasks[1:6]),
start.date = as.Date(c("2024-02-01", "2024-04-01", "2024-06-01",
"2025-01-01", "2025-03-01", "2025-01-01",
"2025-06-01", "2025-12-01")),
end.date = as.Date(c("2024-05-01", "2024-12-01", "2025-06-01",
"2025-08-01", "2026-01-31", "2025-02-01",
"2025-07-01", "2026-01-01")))
# Merge start and end dates into durations.
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr) +
geom_line(aes(value, name), size = 4) +
labs(title = "Project gantt chart",
x = NULL,
y = NULL) +
theme_minimal()
ggplot(mdfr) +
geom_line(aes(value, name), size = 4) +
labs(title = "GSD Post Doc Gantt Chart",
x = NULL,
y = NULL) +
theme_minimal() +
scale_y_discrete(limits=rev)
View(mdfr)
mdfr
dfr
geom_segment()
?geom_segment
ggplot(dfr) +
#geom_line(aes(value, name), size = 4) +
geom_segment(aes(x = start.data, xend = end.date, y = name, yend = name)) +
labs(title = "GSD Post Doc Gantt Chart",
x = NULL,
y = NULL) +
theme_minimal() +
scale_y_discrete(limits=rev)
ggplot(dfr) +
#geom_line(aes(value, name), size = 4) +
geom_segment(aes(x = start.date, xend = end.date, y = name, yend = name)) +
labs(title = "GSD Post Doc Gantt Chart",
x = NULL,
y = NULL) +
theme_minimal() +
scale_y_discrete(limits=rev)
ggplot(dfr) +
#geom_line(aes(value, name), size = 4) +
geom_segment(aes(x = start.date, xend = end.date, y = name, yend = name),
linewidth = 4) +
labs(title = "GSD Post Doc Gantt Chart",
x = NULL,
y = NULL) +
theme_minimal() +
scale_y_discrete(limits=rev)
