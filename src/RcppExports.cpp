// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// first
NumericVector first(NumericVector za, NumericVector zb, NumericVector stdv, NumericVector nints, double delta, LogicalVector bs);
RcppExport SEXP _RTSA_first(SEXP zaSEXP, SEXP zbSEXP, SEXP stdvSEXP, SEXP nintsSEXP, SEXP deltaSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type za(zaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zb(zbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stdv(stdvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nints(nintsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(first(za, zb, stdv, nints, delta, bs));
    return rcpp_result_gen;
END_RCPP
}
// init_int
NumericVector init_int(NumericVector wj, NumericVector zj, double delta, NumericVector stdv);
RcppExport SEXP _RTSA_init_int(SEXP wjSEXP, SEXP zjSEXP, SEXP deltaSEXP, SEXP stdvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type wj(wjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zj(zjSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stdv(stdvSEXP);
    rcpp_result_gen = Rcpp::wrap(init_int(wj, zj, delta, stdv));
    return rcpp_result_gen;
END_RCPP
}
// trap
double trap(NumericVector f, int n, double h);
RcppExport SEXP _RTSA_trap(SEXP fSEXP, SEXP nSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(trap(f, n, h));
    return rcpp_result_gen;
END_RCPP
}
// fcab
double fcab(NumericVector last, int nint, double zam1, double h, double x, NumericMatrix stdv, double delta, int k, LogicalVector bs);
RcppExport SEXP _RTSA_fcab(SEXP lastSEXP, SEXP nintSEXP, SEXP zam1SEXP, SEXP hSEXP, SEXP xSEXP, SEXP stdvSEXP, SEXP deltaSEXP, SEXP kSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type last(lastSEXP);
    Rcpp::traits::input_parameter< int >::type nint(nintSEXP);
    Rcpp::traits::input_parameter< double >::type zam1(zam1SEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type stdv(stdvSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(fcab(last, nint, zam1, h, x, stdv, delta, k, bs));
    return rcpp_result_gen;
END_RCPP
}
// other
NumericVector other(NumericVector za, NumericVector zb, int k, NumericMatrix stdv, NumericVector last, NumericVector nints, double delta, LogicalVector bs);
RcppExport SEXP _RTSA_other(SEXP zaSEXP, SEXP zbSEXP, SEXP kSEXP, SEXP stdvSEXP, SEXP lastSEXP, SEXP nintsSEXP, SEXP deltaSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type za(zaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zb(zbSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type stdv(stdvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type last(lastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nints(nintsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(other(za, zb, k, stdv, last, nints, delta, bs));
    return rcpp_result_gen;
END_RCPP
}
// recur_int
NumericVector recur_int(int k, NumericMatrix stdv, NumericVector zj, NumericVector last, NumericVector zj_up, NumericVector wj_up, double delta, bool bs);
RcppExport SEXP _RTSA_recur_int(SEXP kSEXP, SEXP stdvSEXP, SEXP zjSEXP, SEXP lastSEXP, SEXP zj_upSEXP, SEXP wj_upSEXP, SEXP deltaSEXP, SEXP bsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type stdv(stdvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zj(zjSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type last(lastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zj_up(zj_upSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type wj_up(wj_upSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type bs(bsSEXP);
    rcpp_result_gen = Rcpp::wrap(recur_int(k, stdv, zj, last, zj_up, wj_up, delta, bs));
    return rcpp_result_gen;
END_RCPP
}
// qpos
double qpos(double xq, NumericVector last, int nint, int k, double zam1, double zbm1, NumericMatrix stdv, bool bs, double delta);
RcppExport SEXP _RTSA_qpos(SEXP xqSEXP, SEXP lastSEXP, SEXP nintSEXP, SEXP kSEXP, SEXP zam1SEXP, SEXP zbm1SEXP, SEXP stdvSEXP, SEXP bsSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xq(xqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type last(lastSEXP);
    Rcpp::traits::input_parameter< int >::type nint(nintSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type zam1(zam1SEXP);
    Rcpp::traits::input_parameter< double >::type zbm1(zbm1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type stdv(stdvSEXP);
    Rcpp::traits::input_parameter< bool >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(qpos(xq, last, nint, k, zam1, zbm1, stdv, bs, delta));
    return rcpp_result_gen;
END_RCPP
}
// prob
double prob(double xq, NumericVector last, NumericVector zj, int k, NumericMatrix stdv, bool bs, double delta);
RcppExport SEXP _RTSA_prob(SEXP xqSEXP, SEXP lastSEXP, SEXP zjSEXP, SEXP kSEXP, SEXP stdvSEXP, SEXP bsSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xq(xqSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type last(lastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type zj(zjSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type stdv(stdvSEXP);
    Rcpp::traits::input_parameter< bool >::type bs(bsSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(prob(xq, last, zj, k, stdv, bs, delta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RTSA_first", (DL_FUNC) &_RTSA_first, 6},
    {"_RTSA_init_int", (DL_FUNC) &_RTSA_init_int, 4},
    {"_RTSA_trap", (DL_FUNC) &_RTSA_trap, 3},
    {"_RTSA_fcab", (DL_FUNC) &_RTSA_fcab, 9},
    {"_RTSA_other", (DL_FUNC) &_RTSA_other, 8},
    {"_RTSA_recur_int", (DL_FUNC) &_RTSA_recur_int, 8},
    {"_RTSA_qpos", (DL_FUNC) &_RTSA_qpos, 9},
    {"_RTSA_prob", (DL_FUNC) &_RTSA_prob, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_RTSA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
